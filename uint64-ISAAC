#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

/* external results */
uint64_t randrsl[256];  // Changed to uint64_t array
uint64_t randcnt;

/* internal state */
static uint64_t mm[256]; // Changed to uint64_t
static uint64_t aa = 0, bb = 0, cc = 0;

void isaac() {
    register int i;
    uint64_t x, y;

    cc = cc + 1;    /* cc just gets incremented once per 256 results */
    bb = bb + cc;   /* then combined with bb */

    for (i = 0; i < 256; ++i) {
        x = mm[i];
        switch (i % 4) {
            case 0: aa ^= aa << 13; break;
            case 1: aa ^= aa >> 6;  break;
            case 2: aa ^= aa << 2;  break;
            case 3: aa ^= aa >> 16; break;
        }
        aa = mm[(i + 128) % 256] + aa;
        mm[i] = y = mm[(x >> 2) % 256] + aa + bb;
        randrsl[i] = bb = mm[(y >> 10) % 256] + x;
    }
}

/* If (flag != 0), then use the contents of randrsl[] to initialize mm[]. */
#define mix(a,b,c,d,e,f,g,h) \
{ \
    a ^= b << 11; d += a; b += c; \
    b ^= c >> 2;  e += b; c += d; \
    c ^= d << 8;  f += c; d += e; \
    d ^= e >> 16; g += d; e += f; \
    e ^= f << 10; h += e; f += g; \
    f ^= g >> 4;  a += f; g += h; \
    g ^= h << 8;  b += g; h += a; \
    h ^= a >> 9;  c += h; a += b; \
}

void randinit(int flag) {
    int i;
    uint64_t a, b, c, d, e, f, g, h;
    aa = bb = cc = 0;
    a = b = c = d = e = f = g = h = 0x9e3779b9;  // The golden ratio

    for (i = 0; i < 4; ++i) {
        mix(a, b, c, d, e, f, g, h);
    }

    for (i = 0; i < 256; i += 8) {
        if (flag) {
            a += randrsl[i];
            b += randrsl[i + 1];
            c += randrsl[i + 2];
            d += randrsl[i + 3];
            e += randrsl[i + 4];
            f += randrsl[i + 5];
            g += randrsl[i + 6];
            h += randrsl[i + 7];
        }
        mix(a, b, c, d, e, f, g, h);
        mm[i] = a;         // Assign values directly as uint64_t
        mm[i + 1] = b;
        mm[i + 2] = c;
        mm[i + 3] = d;
        mm[i + 4] = e;
        mm[i + 5] = f;
        mm[i + 6] = g;
        mm[i + 7] = h;
    }

    if (flag) {
        for (i = 0; i < 256; i += 8) {
            a += mm[i];
            b += mm[i + 1];
            c += mm[i + 2];
            d += mm[i + 3];
            e += mm[i + 4];
            f += mm[i + 5];
            g += mm[i + 6];
            h += mm[i + 7];
            mix(a, b, c, d, e, f, g, h);
            mm[i] = a;
            mm[i + 1] = b;
            mm[i + 2] = c;
            mm[i + 3] = d;
            mm[i + 4] = e;
            mm[i + 5] = f;
            mm[i + 6] = g;
            mm[i + 7] = h;
        }
    }

    isaac();  /* Fill in the first set of results */
    randcnt = 256; /* Prepare to use the first set of results */
}

int main() {
    int i, j;
    aa = bb = cc = 0;
    for (i = 0; i < 256; ++i)
        mm[i] = randrsl[i] = 0;
    randinit(1);
    for (i = 0; i < 2; ++i) {
        isaac();
        for (j = 0; j < 256; ++j) {
            printf("%.8x ", randrsl[j]);  // Format for printing 32-bit numbers
            if ((j & 7) == 7)
                printf("\n");
        }
    }
    return 0; // End the program properly
}
